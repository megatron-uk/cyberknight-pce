#!/usr/bin/env python
from __future__ import unicode_literals
"""
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.


injectScript.py
================
A script inserter for the PC-Engine game 'Cyber Knight'.

In order to run, it requires a headerless copy of the Cyber Knight ROM file
and a directory of 'patch' JSON files, as generated by extractScript.py

John Snowdon <john@target-earth.net>
"""

import os
import sys
import traceback
import getopt
import struct
import binascii
import json
import difflib

try:
	import cStringIO as StringIO
except:
	print "cStringIO not available"
	import StringIO



######################################################
############ < User configuration > ##################
######################################################

# Holds all patch files
PATCH_FILES = {}

MISMATCH_OK = False

# Translation table loader
from Table import load_snes_table

# Default values
from config import ROM_NAME, PATCH_DIR_NAME, PATCH_EXTENSION, OUT_ROM_NAME, TABLE_NAME, SNES_SCRIPT, OUT_DIR_NAME
from config import OVERWRITE, VERBOSE
from config import SWITCH_MODE
from config import DAKUTEN_ALL, DAKUTEN, DAKUTEN_REPLACE
from config import FUZZY_LIMIT

# Load the definitions of which ranges in the files to examine
from config import BYTES
from config import METHOD_SIMPLE, METHOD_CONTIGUOUS
from config import METHOD_1, METHOD_2, METHOD_3
from config import METHOD_1_OFFSET, METHOD_2_OFFSET, METHOD_3_OFFSET
from config import METHOD_1_TRAILING_BYTES, METHOD_2_TRAILING_BYTES, METHOD_3_TRAILING_BYTES

######################################################
############ < Code starts here > ####################
######################################################

def mapScript(patchfile, patch, snes_table):
	""" Attempt to map to SNES translation """
	t = 0
	ut = 0
	mt = 0
	for patch_segment in patch["data"]["data"]:
		if (len(patch_segment["trans_text"]) != 0) or (len(patch_segment["raw"]) == 0):
			t += 1
		else:
			ut += 1
	print "Attempting map of %s untranslated strings" % ut
	if VERBOSE:
		print "---"
	for patch_segment in patch["data"]["data"]:
		if (len(patch_segment["trans_text"]) == 0) and (patch_segment["raw_size"] > 1):
			matched = False
			snes_text = None
			if "alt_text" in patch_segment.keys():
				has_alt_text = True
			else:
				has_alt_text = False
				
			# Test for exact match
			for snes_text in snes_table.keys():
				if (snes_text == patch_segment["raw_text"].encode('utf-8')):
					matched = True
					break
					
				if has_alt_text:
					if (snes_text == patch_segment["alt_text"].encode('utf-8')):
						matched = True
						break
			if matched:
				if VERBOSE:
					print "%s - Successfully mapped" % patch_segment["string_start"]
					#print "MATCH!"
					#print "SNES-J:", snes_text
					#print "SNES-E:", snes_table[snes_text]
					#print "PCE:", patch_segment["raw_text"]
				patch_segment["trans_text"] = snes_table[snes_text]
				patch_segment["snes_patched"] = 1
				mt += 1
			else:	
				possible_matches = []
				# Attempt fuzzy match
				for snes_text in snes_table.keys():
					sm = difflib.SequenceMatcher(None, patch_segment["raw_text"].encode('utf-8'), snes_text)
					# Do a quick check
					r = sm.quick_ratio()
					
					if r >= FUZZY_LIMIT:
						# Do a more accurate check
						#if sm.ratio() >= FUZZY_LIMIT:
							d = {}
							d["ratio"] = r
							d["snes-e"] = snes_table[snes_text]
							d["snes-j"] = snes_text
							possible_matches.append(d)
				# Sort list of possibles
				if len(possible_matches) > 0:
					if VERBOSE:
						print "%s - %s Possible matches" % (patch_segment["string_start"], len(possible_matches))
				# Get highest 3
				# Prompt for user action
	if VERBOSE:
		print "---"
	print "Mapping routine found %s matches" % mt
		
	return True
	
######################################################
########## < Run-time code start here > ##############
######################################################

try:
	opts, args = getopt.getopt(sys.argv[1:], "hvs:d:o:f")
except getopt.GetoptError as err:
	print err
	sys.exit(2)

print ""
print "mapScript.py - Map untranslated patches from the PC-Engine CyberKnight to the SNES script"
print "----------------"
print ""

for o, a in opts:
	if o == "-h":
		print "A tool which can map sections of untranslated patch files (output generated by extractScript.py)"
		print "to translated sections from the English SNES translation, writing those translated strings back"
		print "into the PC-Engine patch files for use in injectScript.py later."
		print "If translated sections are found, then they are used instead of the SNES translation."
		print ""
		print "Options:"
		print "-h	Show help text"
		print "-v	Enable verbose output"
		print "-s	SNES script file name (e.g. 'CyberKnightSNES.csv')"
		print "-d	Directory containing untranslated/partially translated patches (.json files) (e.g. './patches/')"
		print "-o	Directory to write the modified translation patches (.json files) (e.g. './patches-processed/')"
		print "-f	Overwrite existing files (otherwise dry-run)"
		print ""
		print "Example:"
		print "mapScript.py -s 'CyberKnightSNES.csv' -d './patches/' -o './patches-processed/'"
		print ""
		sys.exit(0)
		
	if o == "-v":
		VERBOSE = True
		
	if o == "-i":
		ROM_NAME = a

	if o == "-d":
		PATCH_DIR_NAME = a

	if o == "-o":
		OUT_DIR_NAME = a

	if o == "-s":
		SNES_SCRIPT = a
		
	if o == "-f":
		OVERWRITE = True
		
#############################################
# Print configuration
#############################################

print "Configuration"
print "============="
print "Verbose: %s" % VERBOSE
print "Over-write: %s" % OVERWRITE
	
if os.path.isfile(SNES_SCRIPT):
	print "SNES Script File: %s <- OK" % SNES_SCRIPT
else:
	print "SNES Script File: %s <- ERROR, SNES script not found!" % SNES_SCRIPT
	sys.exit(2)
	
if os.path.isdir(OUT_DIR_NAME):
	print "Output Directory: %s <- OK" % OUT_DIR_NAME
else:
	print "Output Directory: %s <- ERROR, directory not found!" % OUT_DIR_NAME
	sys.exit(2)
	
if os.path.isdir(PATCH_DIR_NAME):
	print "Patch Directory: %s <- OK" % PATCH_DIR_NAME
	for d in os.listdir(PATCH_DIR_NAME):
		if os.path.isfile(PATCH_DIR_NAME + "/" + d) and (d.endswith("json")):
			PATCH_FILES[d] = {}
	if len(PATCH_FILES.keys()) < 1:
		print "Patches Found: 0 <- ERROR, no patches found!"
		sys.exit(2)
	else:
		print "Patches Found: %s <- OK" % len(PATCH_FILES) 
		keys = PATCH_FILES.keys()
		keys.sort()
		for d in keys:
			try:
				PATCH_FILES[d]["json"] = open(PATCH_DIR_NAME + "/" + d).read()
				PATCH_FILES[d]["data"] = json.loads(PATCH_FILES[d]["json"])
				t = 0
				for b in PATCH_FILES[d]["data"]["data"]:
					if len(b["trans_text"]) > 0:
						t += 1
				print "- %4s strings %4s translations | %s" % (len(PATCH_FILES[d]["data"]["data"]), t, d)
			except Exception as e:
				print traceback.format_exc()
				print "- %s <- ERROR, not a valid JSON file" % d
				print e
else:
	print "Patch Directory: %s <- ERROR, directory not found!" % PATCH_DIR_NAME
	sys.exit(2)

print ""

#################################################
# Use each patch file in turn
#################################################
print "Mapping Untranslated Patches"
print "============================"
FILE = StringIO.StringIO()
keys = PATCH_FILES.keys()
keys.sort()
snes_table = load_snes_table(SNES_SCRIPT)
for f in keys:
	print ""
	print "================="
	print "Mapping %s" % f

	t = 0
	ut = 0
	for patch_segment in PATCH_FILES[f]["data"]["data"]:
		if (len(patch_segment["trans_text"]) != 0) or (len(patch_segment["raw"]) == 0):
			t += 1
		else:
			ut += 1
	print "Ignoring %s existing translations" % t
	if ut > 0:
		print "Mapping %s untranslated strings"	% ut
		mapScript(f, PATCH_FILES[f], snes_table)
	else:
		pass
	print "-----------------"
	print ""
